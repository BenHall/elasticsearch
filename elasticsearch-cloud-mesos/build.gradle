apply plugin: 'com.bmuschko.docker-remote-api'
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.2'
    }
}

dependencies {
    compile project(':commons')

    compile "org.elasticsearch:elasticsearch:${elasticsearchVersion}"
    compile "log4j:log4j:1.2.16"
    compile "com.mashape.unirest:unirest-java:1.4.5"

}

jar {
    baseName = "elasticsearch-cloud-mesos"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task zip(type: Zip, dependsOn: jar) {

    baseName 'elasticsearch-cloud-mesos'

    from(fileTree("build/libs"), {
        include "*"
    })
}

task copyZip(type: Copy, dependsOn: zip) {
    from        "build/distributions/elasticsearch-cloud-mesos-${project.version}.zip"
    into        'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn   copyZip
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp","https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)
        }
    }
    else {
        url = 'unix:///var/run/docker.sock'
    }
    inputDir = file('.')
    tag = 'mesos/elasticsearch-cloud-mesos'
}

task pushDockerImage(type: DockerPushImage) {
    dependsOn buildDockerImage
    url = 'http://127.0.0.1:4243'
    imageName   'mesos/elasticsearch-cloud-mesos'
    tag         'latest'
}


build.dependsOn buildDockerImage
build.dependsOn copyZip
