
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

allprojects {
    apply plugin: 'idea'
}

idea {
    project {
        languageLevel = '1.8'
        vcs = 'Git'
    }
}

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.ajoberstar:semver-vcs-gradle-grgit:0.1.0-milestone.1"
    classpath "org.ajoberstar:gradle-git:1.2.0"
    classpath 'com.bmuschko:gradle-docker-plugin:2.3.1'
    classpath "com.github.zafarkhaja:java-semver:0.9.0"
  }
}

import com.github.zafarkhaja.semver.UnexpectedCharacterException
import com.github.zafarkhaja.semver.Version
import org.ajoberstar.grgit.Tag
import org.ajoberstar.grgit.Grgit

def grgit = Grgit.open(project.file('.'))
def tags = grgit.tag.list()
def versions = []

tags.each { Tag t ->
    try {
        Version version = new Version.Builder(t.name).build()
        versions << version
    } catch (UnexpectedCharacterException e) {
        // Skip, tag is invalid
   }
}

Version currentVersion = new Version.Builder("0.1.0").build()

versions.each { Version v ->
    if (v.greaterThan(currentVersion)) {
        currentVersion = v
    }
}

println "Current version: " + currentVersion
project.version = currentVersion

task incrementVersion << {
    if (project.hasProperty('releaseType')) {
        if (releaseType == "major") {
            project.version = currentVersion.incrementMajorVersion()
        } else if (releaseType == "minor") {
            project.version = currentVersion.incrementMinorVersion()
        } else if (releaseType == "patch") {
            project.version = currentVersion.incrementPatchVersion()
        }
    } else {
        throw new GradleException('releaseType was not provided. Specify -PreleaseType={major,minor,patch}')
    }
    println "Next version: " + project.version
}

task release(dependsOn: [incrementVersion]) << {
    if (!project.hasProperty('userName')) {
        throw new GradleException('userName was not provided. Specify -PuserName=<user>')
    }
    grgit.tag.add(name: project.version, annotate: true, message: "RELEASE $project.version - by $userName")
    grgit.push()
}

afterEvaluate {
    release.dependsOn getTasksByName('publish', true)
}

subprojects {

    apply plugin: 'maven-publish'
    apply plugin: 'sonar-runner'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply from: "$rootDir/gradle/spock.gradle"
    apply from: "$rootDir/gradle/quality.gradle"
    apply plugin: 'com.bmuschko.docker-remote-api'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    version = rootProject.version.toString()

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group = "org.apache.mesos"
    ext {
        mesosVer = "0.22.1"
	    elasticsearchVersion="1.4.5"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {

        compile "org.apache.mesos:mesos:${mesosVer}"
        compile 'com.google.code.gson:gson:2.3'         // marshalling between the scheduler and executor

        testCompile 'junit:junit:4.11'
        testCompile 'commons-collections:commons-collections:3.2.1'
        testCompile "org.mockito:mockito-all:1.9.5"

    }

    sonarRunner {
        sonarProperties {
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.dynamicAnalysis", "reuseReports"
            property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec"
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    afterEvaluate { project ->
        if (project.hasProperty('imageName')) {
            docker.url = 'unix:///var/run/docker.sock'
            if (System.env.DOCKER_HOST) {
                docker.url = "$System.env.DOCKER_HOST".replace("tcp","https")
                if (System.env.DOCKER_CERT_PATH) {
                    docker.certPath = new File(System.env.DOCKER_CERT_PATH)
                }
            }
            task buildDockerImage(type: DockerBuildImage, dependsOn: [copyJar]) {
                inputDir = file(project.projectDir)
                tag = project.imageName
            }
            task publishDockerImage(type: DockerPushImage) {
                imageName = project.imageName
            }
            project.publish.dependsOn publishDockerImage
        }
    }
}
