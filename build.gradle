allprojects {
    apply plugin: 'idea'
}

idea {
    project {
        languageLevel = '1.8'
        vcs = 'Git'
    }
}

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.ajoberstar:semver-vcs-gradle-grgit:0.1.0-milestone.1"
    classpath "org.ajoberstar:gradle-git:1.2.0"
    classpath "com.github.zafarkhaja:java-semver:0.9.0"
    classpath 'com.bmuschko:gradle-docker-plugin:2.2'
  }
}

apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'org.ajoberstar.semver-vcs-grgit'
apply plugin: 'org.ajoberstar.release-opinion'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.github.zafarkhaja.semver.UnexpectedCharacterException
import org.ajoberstar.grgit.Grgit


//import org.ajoberstar.gradle.git.release.opinion.Strategies
//
//release {
//  grgit = Grgit.open(project.file('.'))
//  versionStrategy Strategies.FINAL
//
//  // set the default, can be one already added or something else
//  def strategy = Strategies.SNAPSHOT
//  strategy = strategy.copyWith(createTag: true)
//  defaultVersionStrategy = strategy
//  tagStrategy {
//    prefixNameWithV = false // defaults to true
//    generateMessage = { version -> "Released by $user" }
//  }
//}

import com.github.zafarkhaja.semver.Version
import org.ajoberstar.grgit.Tag

task calculateNextVersion {

    Version currentVersion = new Version.Builder("0.1.0").build()

    grgit = Grgit.open(project.file('.'))
    grgit.tag.list().each {
        Tag t -> println t.name
        try {
            Version version = new Version.Builder(t.toString()).build()
            if (version.compareTo(currentVersion) == 1) {
                currentVersion = version
            }
        } catch (UnexpectedCharacterException e) {
            // Skip
        }
    }

    println "Existing version: " + currentVersion

    Version nextVersion
    if (incrementType == "major") {
        nextVersion = currentVersion.incrementMajorVersion()
    } else if (incrementType == "minor") {
        nextVersion = currentVersion.incremenetMinorVersion()
    } else {
        nextVersion = currentVersion.incrementPatchVersion()
    }

    println "Next version: " + nextVersion

    // TODO: User name from environment variable

    grgit.tag.add(name: nextVersion, annotate:true, message: "RELEASE $version - by Frank Scholten")

}

task pushImages(dependsOn: calculateNextVersion) {

    println "Preparing to push Docker images [$version]"

    println "Pushing scheduler:$version"
    println "Pushing executor:$version"

}

task pushArtifacts(dependsOn: pushImages) {

    println "Preparing to push artifacts [$version]"

    println "Pushing scheduler:$version"
    println "Pushing executor:$version"

}

task pushGithub(dependsOn: pushArtifacts) {

    println "Preparing to push to GitHub [$version]"

    println "Pushing scheduler:$version"
    println "Pushing executor:$version"

}

subprojects {

    apply plugin: 'sonar-runner'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply from: "$rootDir/gradle/spock.gradle"
    apply from: "$rootDir/gradle/quality.gradle"

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    version = rootProject.version.toString()

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

/*    mainClassName = "com.ebay.myriad.Main"*/

    group = "org.apache.mesos"

    ext {
        mesosVer = "0.22.1"
		elasticsearchVersion="1.4.5"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {

        compile "org.apache.mesos:mesos:${mesosVer}"
        compile 'com.google.code.gson:gson:2.3'         // marshalling between the scheduler and executor

        testCompile 'junit:junit:4.11'
        testCompile 'commons-collections:commons-collections:3.2.1'
        testCompile "org.mockito:mockito-all:1.9.5"

    }

    sonarRunner {
        sonarProperties {
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.dynamicAnalysis", "reuseReports"
            property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec" 
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
        }
    }
}
