apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'spring-boot'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

mainClassName = "org.apache.mesos.elasticsearch.scheduler.Main"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.2'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.4.RELEASE")
    }
}
repositories {
    maven {
        url "https://jitpack.io"
    }
}
dependencies {

    compile project(':commons')

    compile("org.springframework.boot:spring-boot-starter-web:1.2.4.RELEASE") {
        exclude group:"org.springframework.boot", module: "spring-boot-starter-logging"
    }
    compile("org.springframework.boot:spring-boot-starter-log4j:1.2.4.RELEASE")
    compile "commons-cli:commons-cli:1.0"
    compile "commons-io:commons-io:2.4"
    compile "log4j:log4j:1.2.16"

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'joda-time:joda-time:2.3'

}

jar {
    dependsOn ":executor:copyJar"
    baseName = "elasticsearch-mesos-scheduler"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } // Include dependencies
    from { project(":executor").getTasksByName("copyJar", false)[0].outputs.files[0] } // Include executor
    manifest {
        attributes(
            'Main-Class'                : mainClassName,
            'Implementation-Version'    : project.version
        )
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

task copyJar(type: Copy) {
    dependsOn   'jar'
    from        "build/libs/elasticsearch-mesos-scheduler-${project.version}.jar"
    into        'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn   copyJar
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp","https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)

        }
    }
    else {
        url = 'unix:///var/run/docker.sock'
    }
    inputDir = file('.')
    tag = 'mesos/elasticsearch-scheduler'
}
